Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Example 2:

Input: nums = []
Output: []
Example 3:

Input: nums = [0]
Output: []
 

Constraints:

0 <= nums.length <= 3000
-105 <= nums[i] <= 105

Solution:

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& num) {
        sort(num.begin(),num.end());
        
        vector<vector<int>>res;
        for(int i=0;i<num.size()-2;i++)
        {
            if(i==0 || (i>0 && num[i]!=num[i-1]))
            {
                int lo=i+1,h=num.size()-1,sum=0-num[i];
                while(lo<h)
                {
                    if(num[lo]+num[h] == sum)
                    {
                        vector<int>temp;
                        temp.push_back(num[i]);
                        temp.push_back(num[lo]);
                        temp.push_back(num[h]);
                        res.push_back(temp);
                        
                        while(lo<h && num[lo]==num[lo+1]) lo++;
                        while(lo<h && num[h] == num[h-1]) h--;
                        lo++;h--;
                    }
                    else if(num[lo]+num[h]<sum)lo++;
                    else h--;
                }
            }
        }
        return res;
    }
};
