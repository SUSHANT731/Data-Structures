You are given an integer array prices where prices[i] is the price of a given stock on the ith day, and an integer k.

Find the maximum profit you can achieve. You may complete at most k transactions.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: k = 2, prices = [2,4,1]
Output: 2
Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.
Example 2:

Input: k = 2, prices = [3,2,6,5,0,3]
Output: 7
Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.


Program:

class Solution {
public:
    int func(vector<int>& prices) {
        int profit=0;
        for(int i=1;i<prices.size();i++)
        {
            if(prices[i]>prices[i-1]){
                profit+=(prices[i]-prices[i-1]);
            }
        }
        return profit;
    }
    int maxProfit(int k, vector<int>& prices) {
        if(k<=0 || prices.size()<=0) return 0;
        if(k>prices.size()/2)
        {
            func(prices);
        }
        int minp[k];
        int maxp[k];
        for(int i=0;i<k;i++)
        {
            minp[i]=INT_MAX;
            maxp[i]=0;
        }
        for(int i=0;i<prices.size();i++)
        {
            for(int j=0;j<k;j++)
            {
                minp[j]=min(minp[j],prices[i]-(j>0?maxp[j-1]:0));
                maxp[j]=max(maxp[j],prices[i]-minp[j]);
            }
        }
        return maxp[k-1];
    }
};



Note:All the problems of best time to buy and sell stock can be solved with Dynamic Programming.
